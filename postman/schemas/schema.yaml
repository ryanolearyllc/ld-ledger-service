openapi: 3.0.0
info:
  title: Live Data Ledger API
  version: '1.0'
  description: 'Create and manage Live Data ledgers, including adding contacts and getting updates to employment.'
  contact:
    email: support@livedatatechnologies.com
    name: LiveData Support
    url: www.livedatatechnologies.com
servers:
  - url: 'https://gotlivedata.io/api/ledger/v1'
    description: Production
paths:
  '/orgs/{orgId}/ledgers':
    get:
      summary: Get ledgers for org
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ledgers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ledger'
              examples:
                example-1:
                  value:
                    ledgers:
                      - id: '59'
                        name: string
                        description: string
                        size: 0
                        href: string
                        created_by: string
                        created_at: string
                        type: ledger#ledger
      operationId: get-ledgers
      description: |-
        Gets list of ledgers for the org
        Role(s) permitted: viewer, editor, admin
      tags:
        - Ledgers
    post:
      summary: Add a ledger to account
      tags:
        - Ledgers
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ledger'
              examples:
                example-1:
                  value:
                    id: '1234'
                    name: main_ledger
                    description: string
                    size: 5
                    href: /accounts/12/ledgers/1234
      operationId: create-ledger
      description: |-
        Create a new ledger
        Role(s) permitted: editor, admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
              required:
                - name
            examples:
              example-1:
                value:
                  name: My Ledger
                  description: Customer contacts to track
    parameters:
      - schema:
          type: string
          example: '59'
        name: orgId
        in: path
        required: true
  '/orgs/{orgId}/ledgers/{ledgerId}':
    parameters:
      - schema:
          type: string
          example: LPONUMMS
        name: ledgerId
        in: path
        required: true
      - schema:
          type: string
          example: '59'
        name: orgId
        in: path
        required: true
    patch:
      summary: Update ledger
      tags:
        - Ledgers
      responses:
        '204':
          description: No Content
      operationId: update-ledger
      description: |-
        Update the information of an existing ledger.
        Role(s) permitted: editor, admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            examples:
              example-1:
                value:
                  name: My new name
                  description: A better description
    delete:
      summary: Delete ledger
      tags:
        - Ledgers
      responses:
        '204':
          description: No Content
      operationId: delete-ledger
      description: |-
        Delete an existing ledger. This delete happens immediately and all ledger contacts are permanently removed from Live Data.
        Role(s) permitted: editor, admin
    get:
      summary: Get details for a ledger
      operationId: get-ledger
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ledger'
              examples:
                example-1:
                  value:
                    id: '59'
                    name: string
                    description: string
                    size: 0
                    href: string
                    created_by: string
                    created_at: string
                    type: ledger#ledger
            application/xml:
              schema:
                type: object
                properties: {}
      tags:
        - Ledgers
      description: |-
        Get the details for a specified ledger
        Role(s) permitted: viewer, editor, admin
  '/orgs/{orgId}/ledgers/{ledgerId}/contacts':
    parameters:
      - schema:
          type: string
          example: LPONUMMS
        name: ledgerId
        in: path
        required: true
      - schema:
          type: string
          example: '59'
        name: orgId
        in: path
        required: true
    get:
      summary: Get list of contacts from ledger
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  contacts:
                    type: array
                    description: List of contacts. Provided in the `default` view.
                    items:
                      $ref: '#/components/schemas/Contact'
                  count:
                    type: number
                    description: Count of contacts that match the filter. Provided in the `count` view.
              examples:
                Default view response:
                  value:
                    contacts:
                      - id: string
                        name: string
                        company: string
                        linkedin: string
                        title: string
                        createdAt: string
                        lastChangedAt: string
                        type: ledger#contact
                        importCompany: string
                        importTitle: string
                        referenceId: string
                        isVerified: true
                        ledgerImportId: string
                Count view response:
                  value:
                    count: 0
      operationId: get-ledger-contacts
      description: |-
        Gets a list of contacts for the ledger. Any of the contact attributes listed in the querystring parameters can be used as filters (filters operate as partial matches). Use the limit and offset parameters to limit results and improve performance. We recommend always using the fromDate filter to get contacts that have only changed since the specified date.
        Use the /contacts/download endpoint to return the results as CSV.
        Role(s) permitted: viewer, editor, admin
      parameters:
        - schema:
            type: string
          in: query
          name: company
          description: Company name to filter on. Partial match.
        - schema:
            type: string
          in: query
          name: title
          description: Job title to filter on. Partial match.
        - schema:
            type: string
          in: query
          name: name
          description: Contact name to filter on. Partial match.
        - schema:
            type: string
            example: '-name'
          in: query
          name: sortBy
          description: Which field to sort on. Use the pattern +name to sort ascending and -name to sort descending.
        - schema:
            type: integer
          in: query
          name: limit
          description: Number of records to return. Use to improve performance for large ledgers. Used in conjunction with offset.
        - schema:
            type: integer
          in: query
          name: offset
          description: Record number to start at when returning results. Used in conjunction with limit.
        - schema:
            type: string
          in: query
          name: fromDate
          description: Only return contacts that Live Data has updated since the provided date.
        - schema:
            type: string
          in: query
          name: endDate
          description: Only provide contacts that Live Data has updated prior to the provided date.
        - schema:
            type: boolean
          in: query
          name: isVerified
          description: Filter results on whether or not the contacts have been verified by Live Data.
        - schema:
            type: string
          in: query
          name: referenceId
          description: 'Reference ID to filter on. '
        - schema:
            type: string
          in: query
          name: importCompany
          description: Imported company name to filter on. Partial match.
        - schema:
            type: string
          in: query
          name: importTitle
          description: Imported job title to filter on. Partial match.
        - schema:
            type: string
          in: query
          name: linkedin
          description: LinkedIn value to filter on. Partial match.
        - schema:
            type: string
            enum:
              - default
              - count
          in: query
          name: view
          description: Optionally provides a different view of the data. Using `count` returns only the count of items that match this query.
      tags:
        - Ledger Contacts
    post:
      summary: Add contacts to ledger
      operationId: add-ledger-contact
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Imports'
              examples:
                example-1:
                  value:
                    guid: string
                    fileName: string
                    contacts_num: 0
                    imported_by: string
                    status: in_progress
                    import_started_at: string
        '422':
          description: 'One or more contacts specified in the body does not contain the required fields, or contains invalid fields'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                contacts:
                  type: array
                  items:
                    $ref: '#/components/schemas/ContactBody'
            examples:
              example-1:
                value:
                  contacts:
                    - name: string
                      company: string
                      linkedin: string
                      title: string
                      referenceId: string
        description: 'When POSTing contact data, the `name` and `company` fields are required for every contact in the array. The other fields are optional.'
      description: |-
        Asynchronously import contacts via json body. The response from this call is an ImportID which can be checked to determined the status of the import. For performance reasons, limit the number submitted in this call to 2,500 contacts and the request body size to 1MB.
        Role(s) permitted: editor, admin
      tags:
        - Ledger Contacts
  '/orgs/{orgId}/ledgers/{ledgerId}/contacts/download':
    parameters:
      - schema:
          type: string
          example: LPONUMMS
        name: ledgerId
        in: path
        required: true
      - schema:
          type: string
          example: '59'
        name: orgId
        in: path
        required: true
    get:
      summary: Download ledger contacts as file
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: object
      operationId: download-ledger-contacts
      parameters:
        - schema:
            type: string
          in: query
          name: company
          description: Company name to filter on. Partial match.
        - schema:
            type: string
          in: query
          name: title
          description: Job title to filter on. Partial match.
        - schema:
            type: string
          in: query
          name: name
          description: Contact name to filter on. Partial match.
        - schema:
            type: string
            example: '-name'
          in: query
          name: sortBy
          description: Which field to sort on. Use the pattern +name to sort ascending and -name to sort descending.
        - schema:
            type: integer
          in: query
          name: limit
          description: Number of records to return. Use to improve performance for large ledgers. Used in conjunction with offset.
        - schema:
            type: integer
          in: query
          name: offset
          description: Record number to start at when returning results. Used in conjunction with limit.
        - schema:
            type: string
          in: query
          name: fromDate
          description: Only return contacts that Live Data has updated since the provided date.
        - schema:
            type: string
          in: query
          name: endDate
          description: Only provide contacts that Live Data has updated prior to the provided date.
        - schema:
            type: boolean
          in: query
          name: isVerified
          description: Filter results on whether or not the contacts have been verified by Live Data.
        - schema:
            type: string
          in: query
          name: referenceId
          description: 'Reference ID to filter on. '
        - schema:
            type: string
          in: query
          name: importCompany
          description: Imported company name to filter on. Partial match.
        - schema:
            type: string
          in: query
          name: importTitle
          description: Imported job title to filter on. Partial match.
        - schema:
            type: string
          in: query
          name: linkedin
          description: LinkedIn value to filter on. Partial match.
      description: |-
        Gets a list of contacts for the ledger. Any of the contact attributes listed in the querystring parameters can be used as filters (filters operate as partial matches). 
        Use the /contacts endpoint to return the results as JSON.
        Role(s) permitted: viewer, editor, admin
      tags:
        - Ledger Contacts
  '/orgs/{orgId}/ledgers/{ledgerId}/contacts/duplicates':
    parameters:
      - schema:
          type: string
          example: LPONUMMS
        name: ledgerId
        in: path
        required: true
      - schema:
          type: string
          example: '59'
        name: orgId
        in: path
        required: true
    get:
      summary: Get list of contacts that are duplicates on this ledger
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
      operationId: get-duplicate-contacts
      parameters: []
      description: MARKED INTERNAL until validated with UI implementation
      tags:
        - Ledger Contacts
      x-internal: true
  '/orgs/{orgId}/ledgers/{ledgerId}/contacts/imports':
    parameters:
      - schema:
          type: string
          example: LPONUMMS
        name: ledgerId
        in: path
        required: true
      - schema:
          type: string
          example: '59'
        name: orgId
        in: path
        required: true
    get:
      summary: Get all file upload jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  imports:
                    type: array
                    items:
                      $ref: '#/components/schemas/Imports'
                required:
                  - imports
              examples:
                example-1:
                  value:
                    imports:
                      - id: string
                        fileName: string
                        contactsNum: 0
                        importedById: string
                        status: in_progress
                        type: ledger#import
                        importedByUser:
                          email: string
                          name: string
                          createdAt: string
                          type: identity#user
                        countDuplicates: 0
                        countFailures: 0
                        href: string
                        importType: fileUpload
                        importFinishedAt: string
                        importStartedAt: string
                        originalRows: 0
      operationId: get-import-jobs
      description: |-
        Get a list of all contact import jobs for this ledger.
        Role(s) permitted: viewer, editor, admin
      tags:
        - Contact Imports
      parameters:
        - schema:
            type: string
            enum:
              - in_progress
              - complete
          in: query
          name: status
          description: Status to filter on. Partial match.
        - schema:
            type: string
          in: query
          name: fileName
          description: File name to filter on. Partial match.
        - schema:
            type: string
          in: query
          name: sortBy
          description: Which field to sort on. Use the pattern +fileName to sort ascending and -fileName to sort descending.
        - schema:
            type: integer
          in: query
          name: limit
          description: Number of records to return. Use to improve performance for large ledgers. Used in conjunction with offset.
        - schema:
            type: integer
          in: query
          name: offset
          description: Record number to start at when returning results. Used in conjunction with limit.
        - schema:
            type: string
          in: query
          name: importType
          description: Import type to filter on. Partial match.
  '/orgs/{orgId}/ledgers/{ledgerId}/contacts/imports/{importId}':
    parameters:
      - schema:
          type: string
          example: LPONUMMS
        name: ledgerId
        in: path
        required: true
      - schema:
          type: string
        name: importId
        in: path
        required: true
      - schema:
          type: string
          example: '59'
        name: orgId
        in: path
        required: true
    get:
      summary: Get file import info
      operationId: get-import-job
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Imports'
              examples:
                example-1:
                  value:
                    id: string
                    fileName: string
                    contactsNum: 0
                    importedById: string
                    status: in_progress
                    type: ledger#import
                    importedByUser:
                      email: string
                      name: string
                      createdAt: string
                      type: identity#user
                    countDuplicates: 0
                    countFailures: 0
                    href: string
                    importType: fileUpload
                    importFinishedAt: string
                    importStartedAt: string
                    originalRows: 0
      description: |-
        Get details for a specific import job.
        Role(s) permitted: viewer, editor, admin
      tags:
        - Contact Imports
  '/orgs/{orgId}/ledgers/{ledgerId}/contacts/imports/{importId}/downloadErrors':
    parameters:
      - schema:
          type: string
          example: LPONUMMS
        name: ledgerId
        in: path
        required: true
      - schema:
          type: string
        name: importId
        in: path
        required: true
      - schema:
          type: string
          example: '59'
        name: orgId
        in: path
        required: true
    get:
      summary: Get import errors
      operationId: get-import-errors
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: object
                properties: {}
      description: |-
        Get the errors CSV from an import that details which contacts were not imported during an import job and the reason behind each.
        Role(s) permitted: viewer, editor, admin
      tags:
        - Contact Imports
  '/orgs/{orgId}/ledgers/{ledgerId}/contacts/{contactId}':
    parameters:
      - schema:
          type: string
        name: ledgerId
        in: path
        required: true
      - schema:
          type: string
        name: contactId
        in: path
        required: true
      - schema:
          type: string
        name: orgId
        in: path
        required: true
    delete:
      summary: Remove contact from ledger
      tags:
        - Ledger Contacts
      responses:
        '204':
          description: No Content
      operationId: delete-ledger-contact
      description: |-
        Deletes the specified contact from ledger.
        Role(s) permitted: editor, admin
  '/orgs/{orgId}/ledgers/{ledgerId}/contacts/imports/flatfile':
    parameters:
      - schema:
          type: string
        name: orgId
        in: path
        required: true
      - schema:
          type: string
        name: ledgerId
        in: path
        required: true
    post:
      summary: Import contacts from Flatfile
      tags:
        - Contact Imports
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Imports'
      operationId: import-contacts-flatfile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fileName:
                  type: string
                contactsNum:
                  type: number
                batchId:
                  type: string
                originalRows:
                  type: number
                manual:
                  type: boolean
      x-internal: true
      description: |-
        Create a new import job from a Flatfile import. Not listed publicly as users won't use this directly.
        Role(s) required: editor, admin
  '/orgs/{orgId}/ledgers/{ledgerId}/contacts/bulk_delete':
    parameters:
      - schema:
          type: string
        name: orgId
        in: path
        required: true
      - schema:
          type: string
        name: ledgerId
        in: path
        required: true
    post:
      summary: Delete ledger contacts
      tags:
        - Ledger Contacts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  countRowsDeleted:
                    type: number
              examples:
                example-1:
                  value:
                    countRowsDeleted: 0
        '422':
          description: Unprocessable Entity (WebDAV)
      operationId: bulk-delete-ledger-contacts
      description: |-
        Delete ledger contacts in bulk by providing a list of contact IDs to delete.
        Role(s) permitted: editor, admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                contactIds:
                  type: array
                  items:
                    type: string
              required:
                - contactIds
  /maintenance:
    get:
      summary: Get Ledger Maintenance Mode Status
      tags:
        - Administrative
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ledgerMaintenance:
                    type: string
                    enum:
                      - 'on'
                      - 'off'
                required:
                  - ledgerMaintenance
      operationId: get-maintenance-mode
      description: 'Gets whether or not ledgers are in maintenance mode. When maintenance mode is turned on, only GET requests are allowed. All other requests will return a 503. '
      x-internal: true
    post:
      summary: Set Ledger API Maintenance Mode
      operationId: set-maintenance-mode
      responses:
        '200':
          description: OK
      x-internal: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                maintenance:
                  type: string
                  enum:
                    - 'on'
                    - 'off'
              required:
                - maintenance
      description: Sets the maintenance mode of the ledger service
      tags:
        - Administrative
  '/contacts/{contactId}/cleanHistory':
    parameters:
      - schema:
          type: string
        name: contactId
        in: path
        required: true
    get:
      summary: Get Clean history for a given contact
      tags:
        - Ledger Contacts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    cleanJobItemId:
                      type: string
                    personId:
                      type: string
                    referenceId:
                      type: string
                    personLipid:
                      type: string
                    personName:
                      type: string
                    personTitle:
                      type: string
                    orgName:
                      type: string
                    cleanStatus:
                      type: string
                    validInput:
                      type: string
                    processedWith:
                      type: string
                    dateRecorded:
                      type: string
      operationId: get-contact-clean-history
      x-internal: true
      description: 'Get Clean history for a given person, by contact ID'
  '/people/{personId}':
    parameters:
      - schema:
          type: string
        name: personId
        in: path
        required: true
    get:
      summary: Get Person details
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  linkedin:
                    type: string
                  name:
                    type: string
                  company:
                    type: string
                  title:
                    type: string
                  email:
                    type: string
                    format: email
                  location:
                    type: string
                  isActive:
                    type: boolean
                  dateInserted:
                    type: string
                    format: date-time
                  dateChanged:
                    type: string
                    format: date-time
                  dateUpdated:
                    type: string
                    format: date-time
                  ledgers:
                    type: array
                    items:
                      type: object
                      properties:
                        orgId:
                          type: string
                        orgName:
                          type: string
                        ledgerId:
                          type: string
                        ledgerName:
                          type: string
              examples:
                example-2:
                  value:
                    linkedIn: string
                    name: string
                    company: string
                    title: string
                    email: user@example.com
                    location: string
                    isActive: true
                    dateInserted: '2019-08-24T14:15:22Z'
                    dateChanged: '2019-08-24T14:15:22Z'
                    dateUpdated: '2019-08-24T14:15:22Z'
      operationId: getPersonDetails
      description: Get details for the given person
      x-internal: true
components:
  schemas:
    Contact:
      title: contact
      type: object
      description: Represents a contact on a ledger.
      properties:
        id:
          type: string
          description: The unique LD contact ID for this contact.
        name:
          type: string
        company:
          type: string
          description: The current company that employs this contact.
        linkedin:
          type: string
        title:
          type: string
          description: The current job title of this contact.
        createdAt:
          type: string
          description: Date at which this contact was added to this ledger
        lastChangedAt:
          type: string
          description: Most recent date at which LiveData changed this contact's information
        type:
          type: string
          default: ledger#contact
        importCompany:
          type: string
          description: The name of the company that this contact was imported with.
        importTitle:
          type: string
          description: The job title this contact was imported with.
        referenceId:
          type: string
          description: The customer-provided reference ID for this contact.
        isVerified:
          type: boolean
          description: Indicates whether Live Data has been able to verify/identify this contact on the open web.
        ledgerImportId:
          type: string
          description: The ID of the batch import this contact was imported from.
      required:
        - id
        - name
        - createdAt
      x-examples: {}
    ContactBody:
      title: contactBody
      type: object
      description: The contact model used when creating a new contact in a new ledger
      x-examples: {}
      properties:
        name:
          type: string
        company:
          type: string
        linkedin:
          type: string
        title:
          type: string
        referenceId:
          type: string
    Imports:
      title: imports
      type: object
      properties:
        id:
          type: string
          description: Unique Live Data ID for this import.
        fileName:
          type: string
        contactsNum:
          type: integer
          description: The number of contacts that were submitted in this import.
        importedById:
          type: string
          description: User ID that created this import.
        status:
          type: string
          enum:
            - in_progress
            - complete
          readOnly: true
        type:
          type: string
          default: ledger#import
        importedByUser:
          type: object
          properties:
            email:
              type: string
            name:
              type: string
            createdAt:
              type: string
            type:
              type: string
              default: identity#user
        countDuplicates:
          type: integer
          description: Count of records in this import that were identified as duplicates (already on the ledger).
        countFailures:
          type: integer
          description: Count of records in this import that failed to import to the ledger.
        href:
          type: string
          description: Full href of this resource
        importType:
          type: string
          description: 'The type of import. '
          enum:
            - fileUpload
            - manualInput
            - apiImport
        importFinishedAt:
          type: string
        importStartedAt:
          type: string
        originalRows:
          type: integer
          description: 'For file uploads via Flatfile, the number of rows that were in the original file.'
      description: ''
    Ledger:
      title: ledger
      type: object
      properties:
        id:
          type: string
          example: '59'
        name:
          type: string
        description:
          type: string
        size:
          type: integer
        href:
          type: string
        createdAt:
          type: string
        type:
          type: string
          default: ledger#ledger
      required:
        - id
        - name
  securitySchemes:
    Access Token:
      type: http
      scheme: bearer
tags:
  - name: Contact Imports
  - name: Ledger Contacts
  - name: Ledgers
security:
  - Access Token: []
